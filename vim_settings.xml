<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="false" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry encoding="base64">XDxVa0luc2lkZVRleHRWaWV3XD4=</entry>
      </history-search>
      <history-cmd>
        <entry>488</entry>
        <entry>source $MYVIMRC</entry>
        <entry>w</entry>
        <entry encoding="base64">JzwsJz4zNDE=</entry>
        <entry>341</entry>
        <entry>171</entry>
        <entry>807</entry>
        <entry>729</entry>
        <entry>276</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/libraries/sincerelylibFCUK/src/main/java/com/sincerely/lib/debug/DebugMenuActivity.java" timestamp="1600930326298" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/libraries/sincerelylibFCUK/src/main/res/layout/item_order_history_print.xml" timestamp="1600927689249" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/libraries/sincerelylibFCUK/src/main/java/com/sincerely/lib/screens/orderhistory/CardOrderHistoryDetailFragment.java" timestamp="1600927627166" />
      <file name="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/cardview/InkCardBackView.java" timestamp="1600929758340" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/libraries/sincerelylibFCUK/src/main/java/com/sincerely/lib/misc/payment/BrainTreeHandler.java" timestamp="1600930335565" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/network/InkApiService.java" timestamp="1600924667837" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/libraries/sincerelylibFCUK/src/main/res/layout/fragment_order_history_detail.xml" timestamp="1600930987370" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/model/InkProduct.java" timestamp="1600925604677" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/activities/InkActivity.java" timestamp="1600925238062" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/model/InkCardModel.java" timestamp="1600925382045" />
      <file name="/Dummy.txt" timestamp="1600932298725">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/misc/bus/InkBusClasses.java" timestamp="1600924749866" />
      <file name="$USER_HOME$/AndroidStudioProjects/fcuk/libraries/sincerelylibFCUK/src/main/java/com/sincerely/lib/network/responses/misc/SelectCardTypeExperiment.java" timestamp="1600931397901">
        <mark key="[" line="16" column="19" />
        <mark key="]" line="16" column="21" />
        <mark key="^" line="16" column="21" />
        <mark key="." line="16" column="20" />
      </file>
    </filemarks>
    <jumps>
      <jump line="334" column="9" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="1213" column="25" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="1168" column="39" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="146" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkEditTextsHandler.java" />
      <jump line="0" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkEditTextsHandler.java" />
      <jump line="1192" column="36" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="378" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="113" column="37" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="125" column="29" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="154" column="5" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="158" column="61" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/libraries/sincerelylibInk/src/main/java/com/sincerely/lib/screens/contacts/fragments/ContactsFragment.java" />
      <jump line="1412" column="29" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/InkCardCustomizeFragment.java" />
      <jump line="482" column="14" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="271" column="8" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="297" column="4" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/InkCardCustomizeMessageFragment.java" />
      <jump line="174" column="0" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/InkCardCustomizeMessageFragment.java" />
      <jump line="1254" column="52" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/cardview/InkCardView.java" />
      <jump line="39" column="11" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCustomizeToolbar.java" />
      <jump line="39" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCustomizeMessageToolbar.java" />
      <jump line="1" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/res/layout/uk_message_toolbar.xml" />
      <jump line="62" column="49" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/res/layout/uk_message_toolbar.xml" />
      <jump line="22" column="8" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/res/layout/uk_message_toolbar.xml" />
      <jump line="52" column="37" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/res/layout/uk_message_toolbar.xml" />
      <jump line="501" column="8" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="63" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCustomizeMessageToolbar.java" />
      <jump line="17" column="42" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCustomizeMessageToolbar.java" />
      <jump line="72" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/res/layout/uk_message_toolbar.xml" />
      <jump line="1132" column="38" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="140" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkEditTextsHandler.java" />
      <jump line="128" column="41" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardSideView.java" />
      <jump line="229" column="84" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="233" column="68" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="1275" column="31" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="80" column="29" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="48" column="12" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeViewLayout.java" />
      <jump line="113" column="29" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="110" column="8" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="997" column="11" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="253" column="23" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/views/CardCustomizerView.java" />
      <jump line="350" column="36" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="280" column="17" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/cardview/InkCardSide.java" />
      <jump line="640" column="37" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="316" column="32" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="321" column="12" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="125" column="55" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkTextView.java" />
      <jump line="231" column="19" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="2221" column="21" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/InkCardCustomizeFragment.java" />
      <jump line="108" column="46" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/InkStyleSelectView.java" />
      <jump line="118" column="24" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/InkStyleSelectView.java" />
      <jump line="185" column="16" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeViewLayout.java" />
      <jump line="117" column="43" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="946" column="31" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="48" column="13" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="331" column="45" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="427" column="25" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/model/InkCardModel.java" />
      <jump line="65" column="34" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/model/InkCardModel.java" />
      <jump line="1102" column="36" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/cardview/InkCardView.java" />
      <jump line="52" column="31" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/model/InkCardModel.java" />
      <jump line="297" column="22" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardSideView.java" />
      <jump line="410" column="40" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="1470" column="41" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeView.java" />
      <jump line="158" column="31" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="418" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="147" column="81" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkInsideTextView.java" />
      <jump line="512" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="314" column="24" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="386" column="8" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeMessageFragment.java" />
      <jump line="1341" column="5" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="74" column="61" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkInnerTextSideView.java" />
      <jump line="57" column="16" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkInnerTextSideView.java" />
      <jump line="296" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkInnerTextSideView.java" />
      <jump line="52" column="54" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkInnerTextSideView.java" />
      <jump line="29" column="13" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkClassicBackView.java" />
      <jump line="584" column="18" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="502" column="38" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/views/CardCustomizerView.java" />
      <jump line="268" column="0" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/views/CardCustomizerView.java" />
      <jump line="107" column="36" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/views/CardCustomizerView.java" />
      <jump line="268" column="22" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/views/CardCustomizerView.java" />
      <jump line="385" column="69" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="585" column="4" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="287" column="46" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="169" column="40" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/categories/InkCardCategoriesFragment.java" />
      <jump line="262" column="4" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/build.gradle" />
      <jump line="52" column="0" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/build.gradle" />
      <jump line="50" column="22" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/build.gradle" />
      <jump line="282" column="21" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkCardView.java" />
      <jump line="128" column="35" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/views/SignatureView.java" />
      <jump line="191" column="5" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/views/SignatureView.java" />
      <jump line="449" column="32" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/cardview/InkCardBackView.java" />
      <jump line="46" column="11" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkClassicBackView.java" />
      <jump line="55" column="31" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/ink/src/main/java/com/sincerely/android/ink/screens/cardcustomize/model/Template.java" />
      <jump line="38" column="48" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/model/InkProduct.java" />
      <jump line="117" column="20" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/network/InkApiClient.java" />
      <jump line="377" column="4" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/UkCardCustomizeFragment.java" />
      <jump line="76" column="9" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/dagger/InkComponent.java" />
      <jump line="89" column="14" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/model/InkProduct.java" />
      <jump line="118" column="10" filename="$USER_HOME$/AndroidStudioProjects/synergy-android/libraries/sincerelylibInk/src/main/java/com/sincerely/lib/util/sincerely/AppearanceUtil.java" />
      <jump line="503" column="63" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/ukcustomize/cardview/UkInsideTextView.java" />
      <jump line="196" column="36" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/InkOrderHistoryDetailFragment.java" />
      <jump line="76" column="60" filename="$USER_HOME$/AndroidStudioProjects/fcuk/fcuk/src/main/java/com/sincerely/android/ink/screens/InkOrderHistoryDetailFragment.java" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="a" type="4">
        <keys>
          <key char="49" code="0" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
        </keys>
      </register>
      <register name="&quot;" type="4">
        <text>provide</text>
      </register>
      <register name="i" type="4">
        <keys>
          <key char="65535" code="91" mods="130" />
          <key char="105" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
        </keys>
      </register>
      <register name="+" type="2">
        <text encoding="base64">cGFja2FnZSBjb20uc2luY2VyZWx5LmFuZHJvaWQuaW5rLnNjcmVlbnMudWtjdXN0b21pemUuY2FyZHZpZXc7CgppbXBvcnQgYW5kcm9pZC5jb250ZW50LkNsaXBib2FyZE1hbmFnZXI7CmltcG9ydCBhbmRyb2lkLmNvbnRlbnQuQ29udGV4dDsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5EaWFsb2dJbnRlcmZhY2U7CmltcG9ydCBhbmRyb2lkLmdyYXBoaWNzLlBhaW50OwppbXBvcnQgYW5kcm9pZC5ncmFwaGljcy5SZWN0OwppbXBvcnQgYW5kcm9pZC50ZXh0LkR5bmFtaWNMYXlvdXQ7CmltcG9ydCBhbmRyb2lkLnRleHQuRWRpdGFibGU7CmltcG9ydCBhbmRyb2lkLnRleHQuTGF5b3V0OwppbXBvcnQgYW5kcm9pZC50ZXh0LlRleHRQYWludDsKaW1wb3J0IGFuZHJvaWQudGV4dC5UZXh0VXRpbHM7CmltcG9ydCBhbmRyb2lkLnRleHQuVGV4dFdhdGNoZXI7CmltcG9ydCBhbmRyb2lkLnV0aWwuVHlwZWRWYWx1ZTsKaW1wb3J0IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7CmltcG9ydCBhbmRyb2lkLnZpZXcuVmlld1RyZWVPYnNlcnZlcjsKaW1wb3J0IGFuZHJvaWQudmlldy5pbnB1dG1ldGhvZC5FZGl0b3JJbmZvOwppbXBvcnQgYW5kcm9pZC53aWRnZXQuUmVsYXRpdmVMYXlvdXQ7CgppbXBvcnQgYW5kcm9pZC5hcHAuQWxlcnREaWFsb2c7CmltcG9ydCBhbmRyb2lkLndpZGdldC5UZXh0VmlldzsKCmltcG9ydCBjb20uc2luY2VyZWx5LmFuZHJvaWQuaW5rLlI7CmltcG9ydCBjb20uc2luY2VyZWx5LmFuZHJvaWQuaW5rLm1vZGVsLklua1Byb2R1Y3Q7CmltcG9ydCBjb20uc2luY2VyZWx5LmFuZHJvaWQuaW5rLnNjcmVlbnMudWtjdXN0b21pemUuVWtDdXN0b21pemVCdXNFdmVudHM7CmltcG9ydCBjb20uc2luY2VyZWx5LmFuZHJvaWQuaW5rLnZpZXdzLlNpZ25hdHVyZVZpZXc7CmltcG9ydCBjb20uc2luY2VyZWx5LmxpYi5hcHBsaWNhdGlvbi5TZXNzaW9uOwppbXBvcnQgY29tLnNpbmNlcmVseS5saWIuYXBwbGljYXRpb24uU2luY2VyZWx5QXBwOwppbXBvcnQgY29tLnNpbmNlcmVseS5saWIubW9kZWwuQmFzZVByb2R1Y3REaW1lbnM7CmltcG9ydCBjb20uc2luY2VyZWx5LmxpYi5tb2RlbC5wcm9kdWN0LlRleHRBcHBlYXJhbmNlOwppbXBvcnQgY29tLnNpbmNlcmVseS5saWIudXRpbC5hbmRyb2lkLkRpYWxvZ0ZhY3Rvcnk7CmltcG9ydCBjb20uc2luY2VyZWx5LmxpYi51dGlsLmFuZHJvaWQuUmVzSGVscGVyOwppbXBvcnQgY29tLnNpbmNlcmVseS5saWIudXRpbC5kZXZpY2UuRGV2aWNlVXRpbDsKaW1wb3J0IGNvbS5zaW5jZXJlbHkubGliLnV0aWwubGFuZy5Gb250VXRpbDsKaW1wb3J0IGNvbS5zaW5jZXJlbHkubGliLnV0aWwubGFuZy5TdHJpbmdVdGlsOwppbXBvcnQgY29tLnNpbmNlcmVseS5saWIudXRpbC5zaW5jZXJlbHkuQXBwZWFyYW5jZVV0aWw7CmltcG9ydCBjb20uc2luY2VyZWx5LmxpYmNvbW1vbnMubW9kZWwuRm9udDsKaW1wb3J0IGNvbS5zaW5jZXJlbHkubGliY29tbW9ucy5tb2RlbC5Gb250U2l6ZTsKaW1wb3J0IGNvbS5zaW5jZXJlbHkubGliY29tbW9ucy51dGlsLmFuZHJvaWQuVG9hc3RVdGlsOwoKaW1wb3J0IHN0YXRpYyBhbmRyb2lkLmNvbnRlbnQuQ29udGV4dC5DTElQQk9BUkRfU0VSVklDRTsKCnB1YmxpYyBjbGFzcyBVa0luc2lkZVRleHRWaWV3IGV4dGVuZHMgVWtUZXh0VmlldyB7CgogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0FSRF9CQUNLX0NMQVNTSUMgPSAweDExMDsKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENBUkRfQkFDS19QUkVNSVVNX09SX1BBQ0sgPSAweDExMTsKCiAgICAvL2VuYWJsZS9kaXNhYmxlIGZlYXR1cmUKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGJvb2xlYW4gRU5BQkxFX0ZPTlRfTUVUUklDU19CQVNFRF9DT01QVVRBVElPTiA9IHRydWU7CiAgICBwcml2YXRlIHN0YXRpYyBQYWludC5Gb250TWV0cmljcyBkZWZhdWx0Rm9udE1ldHJpY3M7CiAgICBwcml2YXRlIHN0YXRpYyBmbG9hdCBkZWZhdWx0Rm9udFNpemU7CiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgTEVUVEVSUyA9ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWiI7CiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBmbG9hdCBERUZBVUxUX0ZPTlRfSU5DUkVBU0VfRVJST1JfTUFSR0lOX1ZBTFVFID0gMC44MDVmOwogICAgcHJpdmF0ZSBzdGF0aWMgZmxvYXQgRk9OVF9JTkNSRUFTRV9FUlJPUl9NQVJHSU5fVkFMVUUgPSBERUZBVUxUX0ZPTlRfSU5DUkVBU0VfRVJST1JfTUFSR0lOX1ZBTFVFOwoKICAgIHByaXZhdGUgSW5rUHJvZHVjdCBtSW5rUHJvZHVjdDsKICAgIHByaXZhdGUgaW50IGNhcmRUeXBlOwogICAgcHJpdmF0ZSBGb250IGZvbnQ7CiAgICBwcml2YXRlIFN0cmluZyBtVGV4dEN1dE9mZiA9ICIiOwogICAgcHJpdmF0ZSBUZXh0V2F0Y2hlciBtRGVmYXVsdFRleHR3YXRjaGVyOwogICAgcHJpdmF0ZSBpbnQgc2lnbmF0dXJlQnRuSGVpZ2h0OwogICAgcHJpdmF0ZSBpbnQgTEFSR0VfRk9OVF9MSU5FX0xJTUlULCBNRURJVU1fRk9OVF9MSU5FX0xJTUlULCBTTUFMTF9GT05UX0xJTkVfTElNSVQsIFNNQUxMX0ZPTlRfTElORV9OT19TSUdOQVRVUkU7CiAgICBwcml2YXRlIEZvbnRTaXplIHNtYWxsRm9udFNpemU7CiAgICBwcml2YXRlIFNpZ25hdHVyZVZpZXcgbVNpZ25hdHVyZVZpZXc7CiAgICBwcml2YXRlIFRleHRXYXRjaGVyIHR3OwogICAgcHJpdmF0ZSBib29sZWFuIGlzQ29waWVkOwogICAgcHJpdmF0ZSBTdHJpbmcgYmVmb3JlQ29weVRleHQ7CgogICAgcHJpdmF0ZSBUZXh0QXBwZWFyYW5jZSBtVGV4dEFwcGVhcmFuY2U7CiAgICBwcml2YXRlIGludCBtUG9zaXRpb247CiAgICBwcml2YXRlIEZvbnRTaXplIG1DdXJGb250U2l6ZU9iajsKCiAgICBwdWJsaWMgVWtJbnNpZGVUZXh0VmlldyhDb250ZXh0IGNvbnRleHQsIFRleHRBcHBlYXJhbmNlIHRleHRBcHBlYXJhbmNlLCBpbnQgcG9zaXRpb24sIElua1Byb2R1Y3QgaW5rUHJvZHVjdCwgaW50IGNhcmRUeXBlKSB7CiAgICAgICAgc3VwZXIoY29udGV4dCwgdGV4dEFwcGVhcmFuY2UsIHBvc2l0aW9uKTsKICAgICAgICBtVGV4dEFwcGVhcmFuY2UgPSB0ZXh0QXBwZWFyYW5jZTsKICAgICAgICBtUG9zaXRpb24gPSBwb3NpdGlvbjsKICAgICAgICBtSW5rUHJvZHVjdCA9IGlua1Byb2R1Y3Q7CiAgICAgICAgdGhpcy5jYXJkVHlwZSA9IGNhcmRUeXBlOwogICAgICAgIHNldE1lc3NhZ2VTaXplKCk7CiAgICAgICAgaW5pdEVkaXRUZXh0TWVzc2FnZUxpbWl0KCk7CiAgICAgICAgLy9MaXN0ZW5lciBmb3IgdHJ1bmNhdGluZyB0ZXh0IHdoZW4gc3dpdGNoaW5nIGZyb20gcHJlbWl1bSB0byBzdGFuZGFyZAogICAgICAgIGZpbmFsIFVrSW5zaWRlVGV4dFZpZXcgdGV4dFZpZXcgPSB0aGlzOwogICAgfQoKICAgIHB1YmxpYyBVa0luc2lkZVRleHRWaWV3IGRlZXBDb3B5KCl7CiAgICAgICAgcmV0dXJuIG5ldyBVa0luc2lkZVRleHRWaWV3KGdldENvbnRleHQoKSwgbVRleHRBcHBlYXJhbmNlLCBtUG9zaXRpb24sIG1JbmtQcm9kdWN0LCBjYXJkVHlwZSk7CiAgICB9CiAgICBwdWJsaWMgdm9pZCBzZXRTaWduYXR1cmVCdG5IZWlnaHQoaW50IGhlaWdodCkgewogICAgICAgIHNpZ25hdHVyZUJ0bkhlaWdodCA9IGhlaWdodDsKICAgIH0KCiAgICBAT3ZlcnJpZGUKICAgIHByb3RlY3RlZCB2b2lkIGluaXRFZGl0VGV4dFBvc2l0aW9uKFRleHRBcHBlYXJhbmNlIHRleHRBcHBlYXJhbmNlKSB7CiAgICAgICAgc3VwZXIuaW5pdEVkaXRUZXh0UG9zaXRpb24odGV4dEFwcGVhcmFuY2UpOwogICAgICAgIHNldEltZU9wdGlvbnMoRWRpdG9ySW5mby5UWVBFX1RFWFRfRkxBR19JTUVfTVVMVElfTElORSk7CiAgICAgICAgc2V0U2luZ2xlTGluZShmYWxzZSk7CiAgICAgICAgc2V0VHlwZWZhY2UoRm9udFV0aWwuZ2V0VHlwZWZhY2VGb3JGb250TmFtZShTaW5jZXJlbHlBcHAuZ2V0SW5zdGFuY2UoKS5nZXRBc3NldHMoKSwgdGV4dEFwcGVhcmFuY2UuZ2V0Rm9udCgpKSk7CiAgICAgICAgc2V0VGV4dFNpemUoVHlwZWRWYWx1ZS5DT01QTEVYX1VOSVRfUFgsIFVrQ2FyZEhlbHBlci5nZXRWaWV3TG9uZ0RpbWVuKCkgKiAwLjAyZik7CiAgICB9CgogICAgcHJpdmF0ZSB2b2lkIHNldE1lc3NhZ2VTaXplKCkgewogICAgICAgIGlmIChjYXJkVHlwZSA9PSBDQVJEX0JBQ0tfQ0xBU1NJQykgewogICAgICAgICAgICBmb250ID0gbUlua1Byb2R1Y3QuZ2V0Q2xhc3NpY1RlbXBsYXRlKCkuZ2V0TWVzc2FnZUJhY2tGb250KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9udCA9IG1JbmtQcm9kdWN0LmdldFByZW1pdW1UZW1wbGF0ZSgpLmdldE1lc3NhZ2VCYWNrRm9udCgpOwogICAgICAgIH0KICAgICAgICBzZXRUZXh0QmFja0ZvbnRTaXplKGZvbnQuZ2V0Rm9udFNpemUoRm9udC5MQVJHRSkpOwoKCiAgICAgICAgTEFSR0VfRk9OVF9MSU5FX0xJTUlUID0gZm9udC5nZXRMaW5lTGltaXRTaWduYXR1cmUoRm9udC5MQVJHRSk7CiAgICAgICAgTUVESVVNX0ZPTlRfTElORV9MSU1JVCA9IGZvbnQuZ2V0TGluZUxpbWl0U2lnbmF0dXJlKEZvbnQuTUVESVVNKTsKICAgICAgICBzbWFsbEZvbnRTaXplID0gZm9udC5nZXRGb250U2l6ZShGb250LlNNQUxMKTsKICAgICAgICBTTUFMTF9GT05UX0xJTkVfTElNSVQgPSBNRURJVU1fRk9OVF9MSU5FX0xJTUlUICsgKGludCkgKChzbWFsbEZvbnRTaXplLmdldFNpemUoKSAqIE1FRElVTV9GT05UX0xJTkVfTElNSVQpIC8gZm9udC5nZXRGb250U2l6ZShGb250Lk1FRElVTSkuZ2V0U2l6ZSgpKSAtIDEgLSAxOyAvLy0xIHRvIG9mZnNldCBmb3IgcmVzaXppbmcgLy9hbm90aGVyIC0xIGZvciBhIHNtYWxsZXIgbGluZSBsaW1pdAogICAgICAgIGlmIChjYXJkVHlwZSA9PSBDQVJEX0JBQ0tfUFJFTUlVTV9PUl9QQUNLKSB7CiAgICAgICAgICAgIFNNQUxMX0ZPTlRfTElORV9MSU1JVCArPSA0OwogICAgICAgIH0KICAgICAgICBTTUFMTF9GT05UX0xJTkVfTk9fU0lHTkFUVVJFID0gU01BTExfRk9OVF9MSU5FX0xJTUlUICsgNTsgLy80IGJldWNhc2Ugc2lnbmF0dXJlQnRuLmdldEhlaWdodCAvIGZvbnRTaXplKEZvbnQuU21hbGwpCiAgICAgICAgc21hbGxGb250U2l6ZS5zZXRNYXhMaW5lc1NpZ25hdHVyZShTTUFMTF9GT05UX0xJTkVfTElNSVQgLSAxKTsKICAgICAgICBzbWFsbEZvbnRTaXplLnNldE1heExpbmVzKFNNQUxMX0ZPTlRfTElORV9OT19TSUdOQVRVUkUpOwogICAgICAgIGZvbnQuc2V0Rm9udFNpemUoc21hbGxGb250U2l6ZSwgRm9udC5TTUFMTCk7CiAgICB9CgogICAgcHVibGljIElua1Byb2R1Y3QgZ2V0SW5rUHJvZHVjdCgpewogICAgICAgIHJldHVybiBtSW5rUHJvZHVjdDsKICAgIH0KCiAgICBwdWJsaWMgRm9udCBnZXRGb250KCkgewogICAgICAgIHJldHVybiBmb250OwogICAgfQoKICAgIC8vVGFrZXMgaW50IGFzIGEgY29uc3RhbnQgZm9yIHRoZSBhY2NlcHRhYmxlIGZvbnRzaXplcywgRm9udC5TTUFMTCwgRm9udC5NRURJVU0gYW5kIEZvbnQuTEFSR0UKICAgIHByaXZhdGUgdm9pZCBzZXRNZXNzYWdlRm9udChpbnQgZm9udFNpemUsIEJhc2VQcm9kdWN0RGltZW5zIG1OZXdQcm9kdWN0RGltZW5zLCBUZXh0QXBwZWFyYW5jZSBtQmFja1RleHRBcHBlYXJhbmNlKSB7CiAgICAgICAgQXBwZWFyYW5jZVV0aWwuc2V0VGV4dEJhY2tGb250U2l6ZSh0aGlzLAogICAgICAgICAgICAgICAgZm9udC5nZXRGb250U2l6ZShmb250U2l6ZSksCiAgICAgICAgICAgICAgICBtTmV3UHJvZHVjdERpbWVucywKICAgICAgICAgICAgICAgIG1CYWNrVGV4dEFwcGVhcmFuY2UpOwoKICAgICAgICBzZXRUeXBlZmFjZShGb250VXRpbC5nZXRUeXBlZmFjZUZvckZvbnROYW1lKFNpbmNlcmVseUFwcC5nZXRJbnN0YW5jZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRBc3NldHMoKSwKICAgICAgICAgICAgICAgICJNdXNlb1NsYWItMzAwIikpOwogICAgfQoKICAgIHByaXZhdGUgaW50IG1DdXJyZW50Rm9udFNpemUgPSBGb250LkxBUkdFOwoKICAgIC8qKgogICAgICogVXNlZCB0byBtYW5hZ2UgdGV4dCBsaW1pdCBhbmQgYWx0ZXJuYXRpb24gYmV0d2VlbiBsYXJnZSBhbmQgc21hbGwgZm9udHMKICAgICAqLwogICAgcHVibGljIHZvaWQgdXBkYXRlVGV4dFdhdGNoZXIoU2Vzc2lvbiBtU2Vzc2lvbiwgU2lnbmF0dXJlVmlldyBzaWduYXR1cmVWaWV3KSB7CgogICAgICAgIC8vUmVtb3ZlIHRoZSBkZWZhdWx0IHRleHQgd2F0Y2hlcgogICAgICAgIGlmIChtRGVmYXVsdFRleHR3YXRjaGVyICE9IG51bGwpIHsKICAgICAgICAgICAgcmVtb3ZlVGV4dENoYW5nZWRMaXN0ZW5lcihtRGVmYXVsdFRleHR3YXRjaGVyKTsKICAgICAgICB9CiAgICAgICAgRm9udCBmb250ID0gZ2V0Rm9udCgpOwoKICAgICAgICBVa1RleHRWaWV3IHVrVGV4dFZpZXcgPSB0aGlzOwoKICAgICAgICB0dyA9IG5ldyBUZXh0V2F0Y2hlcigpIHsKICAgICAgICAgICAgcHJpdmF0ZSBTdHJpbmcgdGV4dDsKICAgICAgICAgICAgcHJpdmF0ZSBpbnQgYmVmb3JlQ3Vyc29yUG9zaXRpb24gPSAwOwogICAgICAgICAgICBwcml2YXRlIGludCBwcmV2aW91c0xlbmd0aDsKICAgICAgICAgICAgcHJpdmF0ZSBpbnQgY3VycmVudExlbmd0aDsKICAgICAgICAgICAgcHJpdmF0ZSBib29sZWFuIGRpYWxvZ0lzU2hvd2luZyA9IGZhbHNlOwogICAgICAgICAgICBwcml2YXRlIGJvb2xlYW4gc2hvdWxkUmVtb3ZlTGFzdElucHV0Q2hhciA9IGZhbHNlOwoKICAgICAgICAgICAgZmluYWwgZmxvYXQgbWVkaXVtVGV4dFNpemVJblB4ID0gc2V0VGV4dEJhY2tGb250U2l6ZShmb250LmdldEZvbnRTaXplKEZvbnQuTUVESVVNKSk7IC8vR2V0IHRoZSBtZWRpdW0gc2l6ZSBkYXRhCgogICAgICAgICAgICBmaW5hbCBmbG9hdCBsYXJnZVRleHRTaXplSW5QeCA9IHNldFRleHRCYWNrRm9udFNpemUoZm9udC5nZXRGb250U2l6ZShGb250LkxBUkdFKSk7IC8vR2V0IHRoZSBsYXJnZSBzaXplIGRhdGEgYW5kIHNldCB0aGUgbGFyZ2Ugc2l6ZQoKCiAgICAgICAgICAgIEBPdmVycmlkZQogICAgICAgICAgICBwdWJsaWMgdm9pZCBiZWZvcmVUZXh0Q2hhbmdlZChDaGFyU2VxdWVuY2UgcywgaW50IHN0YXJ0LCBpbnQgY291bnQsIGludCBhZnRlcikgewogICAgICAgICAgICAgICAgdGV4dCA9IHMudG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgIHByZXZpb3VzTGVuZ3RoID0gdGV4dC5sZW5ndGgoKTsKICAgICAgICAgICAgICAgIGJlZm9yZUN1cnNvclBvc2l0aW9uID0gc3RhcnQgKyBjb3VudDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uVGV4dENoYW5nZWQoQ2hhclNlcXVlbmNlIHMsIGludCBzdGFydCwgaW50IGJlZm9yZSwgaW50IGNvdW50KSB7CgogICAgICAgICAgICB9CgogICAgICAgICAgICBAT3ZlcnJpZGUKICAgICAgICAgICAgcHVibGljIHZvaWQgYWZ0ZXJUZXh0Q2hhbmdlZChFZGl0YWJsZSBzKSB7CgogICAgICAgICAgICAgICAgZmluYWwgVGV4dFdhdGNoZXIgd2F0Y2hlciA9IHRoaXM7CgogICAgICAgICAgICAgICAgdWtUZXh0Vmlldy5wb3N0KG5ldyBSdW5uYWJsZSgpIHsKICAgICAgICAgICAgICAgICAgICBAT3ZlcnJpZGUKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdm9pZCBydW4oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlhbG9nSXNTaG93aW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2JlY2F1c2UgdGhlIHNob3dpbmcgb2YgdGhlIGRpYWxvZyBpcyBhc3luYyBhbmQgaXQgdGFrZXMgdGltZSBpZiB0aGUgdXNlciB0eXBlcyBmYXN0IGl0IHdpbGwgc3RpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYmUgYWxsb3dlZCB0byBhZGQgb25lIGNoYXIgYmVmb3JlIHRoZSBkaWFsb2cgaXMgYWN0dWFsbHkgc2hvd24uIGlmIHRoYXQncyB0aGUgY2FzZSB3ZSBuZWVkIHRvIHJlbW92ZSBqdXN0IHRoYXQgY2hhcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9idXQgb25seSBvbmNlIHNpbmNlIGlmIHdlIGRvIGl0IGZvciBldmVyeSB0eXBlIG9mIHRoZSBrZXkgd2Ugd2lsbCBlbmQgdXAgcmVtb3ZpbmcgdGhlIHdob2xlIHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRSZW1vdmVMYXN0SW5wdXRDaGFyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVtb3ZlTGFzdElucHV0Q2hhciA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNpZ25hdHVyZVJlbW92YWxEaWFsb2dDYW5jZWwodWtUZXh0Vmlldyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgbm8gc2lnbmF0dXJlIGluY3JlYXNlIHRoZSBtYXggbGluZXMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpZ25hdHVyZVZpZXcuaXNTaWduYXR1cmVIaWRkZW4oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxGb250U2l6ZS5zZXRNYXhMaW5lc1NpZ25hdHVyZShTTUFMTF9GT05UX0xJTkVfTk9fU0lHTkFUVVJFIC0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFsbEZvbnRTaXplLnNldE1heExpbmVzU2lnbmF0dXJlKFNNQUxMX0ZPTlRfTElORV9MSU1JVCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHVrVGV4dFZpZXcucmVtb3ZlVGV4dENoYW5nZWRMaXN0ZW5lcih3YXRjaGVyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyBjdXJyZW50U3RyaW5nID0gcy50b1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gY3VycmVudFN0cmluZy5sZW5ndGgoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmRUeXBlID09IENBUkRfQkFDS19DTEFTU0lDKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVRleHRVdGlscy5lcXVhbHMocywgbVRleHRDdXRPZmYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbUJ1cy5wb3N0KG5ldyBVa0N1c3RvbWl6ZUJ1c0V2ZW50cy5UZXh0TW9kaWZpZWRBY3Rpb24odHJ1ZSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGVuZ3RoICE9IHByZXZpb3VzTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbCBmbG9hdCBjdXJyZW50TGluZU51bWJlciA9IHVrVGV4dFZpZXcuZ2V0TGluZUNvdW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExpbmVOdW1iZXIgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaW5lTnVtYmVyID4gZm9udC5nZXRMaW5lTGltaXRTaWduYXR1cmUobUN1cnJlbnRGb250U2l6ZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1DdXJyZW50Rm9udFNpemUgPT0gRm9udC5MQVJHRSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMZW5ndGggPiBwcmV2aW91c0xlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRCYWNrRm9udFNpemUoZm9udC5nZXRGb250U2l6ZShGb250Lk1FRElVTSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1DdXJyZW50Rm9udFNpemUgPSBGb250Lk1FRElVTTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtQ3VycmVudEZvbnRTaXplID09IEZvbnQuTUVESVVNKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExlbmd0aCA+IHByZXZpb3VzTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGV4dEJhY2tGb250U2l6ZShmb250LmdldEZvbnRTaXplKEZvbnQuU01BTEwpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5TTUFMTDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVW5kbyBsYXN0IGNoYW5nZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWtUZXh0Vmlldy5zZXRUZXh0KHRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWtUZXh0Vmlldy5zZXRTZWxlY3Rpb24oYmVmb3JlQ3Vyc29yUG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaW5lTnVtYmVyID49IFNNQUxMX0ZPTlRfTElORV9OT19TSUdOQVRVUkUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2VVdGlsLnNoYWtlVGhlTWVzc2FnZShnZXRDb250ZXh0KCksIHVrVGV4dFZpZXcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1DdXJyZW50Rm9udFNpemUgPT0gRm9udC5NRURJVU0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGluZU51bWJlciA8PSBmb250LmdldExpbmVMaW1pdFNpZ25hdHVyZShGb250LkxBUkdFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBjdXJyZW50TGVuZ3RoIDwgcHJldmlvdXNMZW5ndGgpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwgaW50IGVzdGltYXRlZE51bWJlck9mTGluZXMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UHJvamVjdGVkTnVtYmVyT2ZMaW5lcyhsYXJnZVRleHRTaXplSW5QeCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlc3RpbWF0ZWROdW1iZXJPZkxpbmVzIDw9IExBUkdFX0ZPTlRfTElORV9MSU1JVCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUZXh0QmFja0ZvbnRTaXplKGZvbnQuZ2V0Rm9udFNpemUoRm9udC5MQVJHRSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5MQVJHRTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU2FmZXR5IGNoZWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ3V0T2ZmKHVrVGV4dFZpZXcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRCYWNrRm9udFNpemUoZm9udC5nZXRGb250U2l6ZShGb250Lk1FRElVTSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5NRURJVU07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1DdXJyZW50Rm9udFNpemUgPT0gRm9udC5TTUFMTCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaW5lTnVtYmVyIDw9IGZvbnQuZ2V0TGluZUxpbWl0U2lnbmF0dXJlKEZvbnQuTUVESVVNKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBjdXJyZW50TGVuZ3RoIDwgcHJldmlvdXNMZW5ndGgpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwgaW50IGVzdGltYXRlZE51bWJlck9mTGluZXMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UHJvamVjdGVkTnVtYmVyT2ZMaW5lcyhtZWRpdW1UZXh0U2l6ZUluUHgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXN0aW1hdGVkTnVtYmVyT2ZMaW5lcyA8PSBNRURJVU1fRk9OVF9MSU5FX0xJTUlUKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRCYWNrRm9udFNpemUoZm9udC5nZXRGb250U2l6ZShGb250Lk1FRElVTSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5NRURJVU07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1NhZmV0eSBjaGVjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0N1dE9mZih1a1RleHRWaWV3KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUZXh0QmFja0ZvbnRTaXplKGZvbnQuZ2V0Rm9udFNpemUoRm9udC5TTUFMTCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5TTUFMTDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGVyZSBpcyBubyBzaWduYXR1cmUsIGhhdmUgdGhlIHNpZ25hdHVyZSBmaWVsZCB2aXNpYmxlIGFzIGxvbmcgYXMgdGhlIGxpbmUgbnVtYmVyIGlzIGJlbG93IHRoZSBtYXggcG9zc2libGUgbGluZSBudW1iZXIgd2l0aCBzaWduYXR1cmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU2hvdyBzaWduYXR1cmUgaWYgbGVzcyB0aGFuIDEyIGxpbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExpbmVOdW1iZXIgPCBTTUFMTF9GT05UX0xJTkVfTElNSVQgJiYgc2lnbmF0dXJlVmlldy5pc1NpZ25hdHVyZUhpZGRlbigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlVmlldy5zaG93U2lnbmF0dXJlRmllbGRzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IHRleHRWaWV3SGVpZ2h0ID0gZ2V0V3JhcHBlckhlaWdodCgpIC0gc2lnbmF0dXJlQnRuSGVpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Vmlld0hlaWdodCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRpdmVMYXlvdXQuTGF5b3V0UGFyYW1zIGV0bHAgPSBuZXcgUmVsYXRpdmVMYXlvdXQuTGF5b3V0UGFyYW1zKFZpZXdHcm91cC5MYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5ULCBWaWV3R3JvdXAuTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVCk7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV0bHAuYWRkUnVsZShDRU5URVJfVkVSVElDQUwsIFRSVUUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1a1RleHRWaWV3LnNldExheW91dFBhcmFtcyhldGxwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGVyZSBpcyBubyBzaWduYXR1cmUsIGhpZGUgdGhlIHNpZ25hdHVyZSBmaWVsZCBhcyBsb25nIGFzIHRoZSBjdXJyZW50TGluZU51bWJlciBpcyBncmVhdGVyIHRoYW4gdGhlIG1heGltdW0gcG9zc2libGUgbGluZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSGlkZSBzaWduYXR1cmUgaWYgZ3JlYXRlciB0aGFuIDEyIGxpbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExpbmVOdW1iZXIgPj0gU01BTExfRk9OVF9MSU5FX0xJTUlUKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpZ25hdHVyZVZpZXcuaGFzU2lnbmF0dXJlKCkgJiYgZ2V0SXNCZWluZ0VkaXRlZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ0lzU2hvd2luZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFJlbW92ZUxhc3RJbnB1dENoYXIgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVTaWduYXR1cmVSZW1vdmFsRGlhbG9nQ2FuY2VsKHVrVGV4dFZpZXcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGVydERpYWxvZy5CdWlsZGVyIGJ1aWxkZXIgPSBuZXcgQWxlcnREaWFsb2cuQnVpbGRlcihnZXRDb250ZXh0KCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLnNldENhbmNlbGFibGUoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLnNldFRpdGxlKFJlc0hlbHBlci5nZXRTdHJpbmcoUi5zdHJpbmcuc2lnbmF0dXJlX2RpYWxvZ190aXRsZSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLnNldE1lc3NhZ2UoUmVzSGVscGVyLmdldFN0cmluZyhSLnN0cmluZy5zaWduYXR1cmVfZGlhbG9nX21lc3NhZ2UpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5zZXROZXV0cmFsQnV0dG9uKFJlc0hlbHBlci5nZXRTdHJpbmcoUi5zdHJpbmcuY29udGludWVfdGV4dCksIG5ldyBEaWFsb2dJbnRlcmZhY2UuT25DbGlja0xpc3RlbmVyKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdm9pZCBvbkNsaWNrKERpYWxvZ0ludGVyZmFjZSBkaWFsb2csIGludCB3aGljaCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZVZpZXcuaGlkZVNpZ25hdHVyZUZpZWxkcygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSW5jcmVhc2UgdGhlIGhlaWdodCBvZiB0aGUgZWRpdHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGl2ZUxheW91dC5MYXlvdXRQYXJhbXMgbHAgPSBuZXcgUmVsYXRpdmVMYXlvdXQuTGF5b3V0UGFyYW1zKFZpZXdHcm91cC5MYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5ULCBWaWV3R3JvdXAuTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWtUZXh0Vmlldy5zZXRMYXlvdXRQYXJhbXMobHApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ0lzU2hvd2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5kaXNtaXNzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWtUZXh0Vmlldy5zZXRUZXh0KGN1cnJlbnRTdHJpbmcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVrVGV4dFZpZXcuc2V0U2VsZWN0aW9uKGN1cnJlbnRTdHJpbmcubGVuZ3RoKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24gZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0lnbm9yZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5zZXROZWdhdGl2ZUJ1dHRvbihSZXNIZWxwZXIuZ2V0U3RyaW5nKFIuc3RyaW5nLmNhbmNlbCksIG5ldyBEaWFsb2dJbnRlcmZhY2UuT25DbGlja0xpc3RlbmVyKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdm9pZCBvbkNsaWNrKERpYWxvZ0ludGVyZmFjZSBkaWFsb2csIGludCB3aGljaCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ0lzU2hvd2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5kaXNtaXNzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29waWVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVrVGV4dFZpZXcuc2V0VGV4dChiZWZvcmVDb3B5VGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29waWVkID0gZmFsc2U7IC8vcmVzZXQgZmxhZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZUVkaXRUZXh0SGVpZ2h0QW5kU2V0VGV4dFNpemUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5zZXRPbkRpc21pc3NMaXN0ZW5lcihuZXcgRGlhbG9nSW50ZXJmYWNlLk9uRGlzbWlzc0xpc3RlbmVyKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdm9pZCBvbkRpc21pc3MoRGlhbG9nSW50ZXJmYWNlIGRpYWxvZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ0lzU2hvd2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5jcmVhdGUoKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlVmlldy5oaWRlU2lnbmF0dXJlRmllbGRzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSW5jcmVhc2UgdGhlIGhlaWdodCBvZiB0aGUgZWRpdHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRpdmVMYXlvdXQuTGF5b3V0UGFyYW1zIGxwID0gbmV3IFJlbGF0aXZlTGF5b3V0LkxheW91dFBhcmFtcyhWaWV3R3JvdXAuTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCwgVmlld0dyb3VwLkxheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1a1RleHRWaWV3LnNldExheW91dFBhcmFtcyhscCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB1a1RleHRWaWV3LmFkZFRleHRDaGFuZ2VkTGlzdGVuZXIod2F0Y2hlcik7CgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgOwogICAgICAgIHVrVGV4dFZpZXcuYWRkVGV4dENoYW5nZWRMaXN0ZW5lcih0dyk7CiAgICB9CgogICAgQE92ZXJyaWRlCiAgICBwdWJsaWMgdm9pZCBzZXRUeXBlZmFjZShTdHJpbmcgZm9udCwgZmxvYXQgcmF0aW8pIHsKICAgICAgICBzZXRUeXBlZmFjZShGb250VXRpbC5nZXRUeXBlZmFjZUZvckZvbnROYW1lKFNpbmNlcmVseUFwcC5nZXRJbnN0YW5jZSgpLmdldEFzc2V0cygpLCBmb250KSk7CiAgICAgICAgc2V0Q3VycmVudEZvbnQoZm9udCk7CiAgICAgICAgdGhpcy5tRm9udFJhdGlvID0gcmF0aW87CiAgICAgICAgaWYgKG1DdXJGb250U2l6ZU9iaiAhPSBudWxsKQogICAgICAgICAgICBtQ3VyRm9udFNpemVPYmogPSBnZXRGb250KCkuZ2V0Rm9udFNpemUoRm9udC5MQVJHRSk7CiAgICAgICAgc2V0VGV4dEJhY2tGb250U2l6ZShtQ3VyRm9udFNpemVPYmopOwogICAgfQoKICAgIHByaXZhdGUgYm9vbGVhbiBpc0N1dE9mZihVa1RleHRWaWV3IGEpIHsKICAgICAgICBUZXh0UGFpbnQgcGFpbnQgPSBhLmdldFBhaW50KCk7CiAgICAgICAgUmVjdCByZWN0ID0gbmV3IFJlY3QoKTsKICAgICAgICBTdHJpbmcgdGV4dCA9IFN0cmluZy52YWx1ZU9mKGEuZ2V0VGV4dCgpKTsKICAgICAgICBwYWludC5nZXRUZXh0Qm91bmRzKHRleHQsIDAsIHRleHQubGVuZ3RoKCksIHJlY3QpOwogICAgICAgIGlmIChyZWN0LmhlaWdodCgpID4gYS5nZXRIZWlnaHQoKSB8fCByZWN0LndpZHRoKCkgPiBhLmdldFdpZHRoKCkpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBwcml2YXRlIHZvaWQgaGFuZGxlU2lnbmF0dXJlUmVtb3ZhbERpYWxvZ0NhbmNlbChVa1RleHRWaWV3IHVrVGV4dFZpZXcpIHsKICAgICAgICBFZGl0YWJsZSBjdXJyZW50RWRpdGFibGUgPSB1a1RleHRWaWV3LmdldFRleHQoKTsKICAgICAgICBpZiAoY3VycmVudEVkaXRhYmxlICE9IG51bGwgJiYgY3VycmVudEVkaXRhYmxlLmxlbmd0aCgpID4gMCkgewogICAgICAgICAgICBTdHJpbmcgbmV3VGV4dCA9IGN1cnJlbnRFZGl0YWJsZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBjdXJyZW50RWRpdGFibGUubGVuZ3RoKCkgLSAxKTsKICAgICAgICAgICAgaWYgKCFUZXh0VXRpbHMuaXNFbXB0eShuZXdUZXh0KSkgewogICAgICAgICAgICAgICAgdWtUZXh0Vmlldy5zZXRUZXh0KG5ld1RleHQpOwogICAgICAgICAgICAgICAgY3VycmVudEVkaXRhYmxlID0gdWtUZXh0Vmlldy5nZXRUZXh0KCk7CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEVkaXRhYmxlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICB1a1RleHRWaWV3LnNldFNlbGVjdGlvbihjdXJyZW50RWRpdGFibGUubGVuZ3RoKCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIEBPdmVycmlkZQogICAgcHVibGljIGJvb2xlYW4gb25UZXh0Q29udGV4dE1lbnVJdGVtKGludCBpZCkgewogICAgICAgIENsaXBib2FyZE1hbmFnZXIgY2xpcGJvYXJkID0gKENsaXBib2FyZE1hbmFnZXIpIGdldENvbnRleHQoKS5nZXRTeXN0ZW1TZXJ2aWNlKENMSVBCT0FSRF9TRVJWSUNFKTsKICAgICAgICBpZiAoY2xpcGJvYXJkLmdldFByaW1hcnlDbGlwKCkgPT0gbnVsbCkgewogICAgICAgICAgICBEaWFsb2dGYWN0b3J5LnNob3dEaWFsb2coZ2V0Q29udGV4dCgpLCAiV2hvb3BzIiwgIlRoZSB0ZXh0IHlvdSd2ZSBlbnRlcmVkIGlzIHRvbyBsb25nIGZvciB0aGlzIGNhcmQuIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpbnQgcHJvamVjdGVkTGluZUNvdW50ID0gKChnZXRQcm9qZWN0ZWROdW1iZXJPZkxpbmVzKGNsaXBib2FyZC5nZXRQcmltYXJ5Q2xpcCgpLmdldEl0ZW1BdCgwKS5nZXRUZXh0KCkudG9TdHJpbmcoKSwgY2FsY3VsYXRlVGV4dEJhY2tGb250U2l6ZShzbWFsbEZvbnRTaXplKSkpKTsKICAgICAgICBpZiAocHJvamVjdGVkTGluZUNvdW50ID4gZm9udC5nZXRMaW5lTGltaXROb1NpZ25hdHVyZShGb250LlNNQUxMKSkgewogICAgICAgICAgICBEaWFsb2dGYWN0b3J5LnNob3dEaWFsb2coZ2V0Q29udGV4dCgpLCAiV2hvb3BzIiwgIlRoZSB0ZXh0IHlvdSd2ZSBlbnRlcmVkIGlzIHRvbyBsb25nIGZvciB0aGlzIGNhcmQuIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaXNDb3BpZWQgPSB0cnVlOyAvL2ZsYWcgdXNlZCBmb3IgaXNDb3BpZWQKICAgICAgICBpZiAoZ2V0VGV4dCgpICE9IG51bGwpCiAgICAgICAgICAgIGJlZm9yZUNvcHlUZXh0ID0gZ2V0VGV4dCgpLnRvU3RyaW5nKCk7IC8vZ2V0IHRoZSBzdHJpbmcgYmVmb3JlIGNvcHkgdG8gdXNlIGZvciBjYW5jZWwgZGlhbG9nCiAgICAgICAgYm9vbGVhbiBjb25zdW1lZCA9IHN1cGVyLm9uVGV4dENvbnRleHRNZW51SXRlbShpZCk7CiAgICAgICAgaWYgKGlkID09IGFuZHJvaWQuUi5pZC5wYXN0ZSkgewogICAgICAgICAgICB0cnVuY2F0ZUFsbCgpOwogICAgICAgICAgICBkaXNwbGF5VmlldygpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29uc3VtZWQ7CiAgICB9CgogICAgLy9CdWxsc2hpdCBtZXRob2QgcmVxdWlvcmVkIHRvIGZpeCBhbmRyb2lkIE9TIGJ1ZyB3aGVyZSB0aGUgdmlldyB3b3VsZCByYW5kb21seSBkaXNzYXBlYXIKICAgIHByaXZhdGUgdm9pZCBkaXNwbGF5VmlldygpIHsKICAgICAgICBzZXRUZXh0KGdldFRleHQoKSk7CiAgICAgICAgc2Nyb2xsVG8oMCwgMCk7CiAgICAgICAgcHJvY2Vzc1RleHRCb3gobnVsbCk7CiAgICB9CgogICAgcHJpdmF0ZSB2b2lkIGluaXRFZGl0VGV4dE1lc3NhZ2VMaW1pdCgpIHsKCiAgICAgICAgY2hhbmdlSW5pdGFsRm9udFNpemUoKTsKCiAgICAgICAgbURlZmF1bHRUZXh0d2F0Y2hlciA9IG5ldyBUZXh0V2F0Y2hlcigpIHsKICAgICAgICAgICAgcHJpdmF0ZSBTdHJpbmcgdGV4dDsKICAgICAgICAgICAgcHJpdmF0ZSBpbnQgcHJldmlvdXNMZW5ndGg7CiAgICAgICAgICAgIHByaXZhdGUgaW50IGN1cnJlbnRMZW5ndGg7CiAgICAgICAgICAgIHByaXZhdGUgaW50IGJlZm9yZUN1cnNvclBvc2l0aW9uID0gMDsKICAgICAgICAgICAgcHJpdmF0ZSBpbnQgbUN1cnJlbnRGb250U2l6ZSA9IEZvbnQuTEFSR0U7CgogICAgICAgICAgICBmaW5hbCBpbnQgTEFSR0VfRk9OVF9MSU5FX0xJTUlUID0gZm9udC5nZXRMaW5lTGltaXROb1NpZ25hdHVyZShGb250LkxBUkdFKTsKICAgICAgICAgICAgZmluYWwgZmxvYXQgbGFyZ2VUZXh0U2l6ZUluUHggPSBzZXRUZXh0QmFja0ZvbnRTaXplKGZvbnQuZ2V0Rm9udFNpemUoRm9udC5MQVJHRSkpOwoKICAgICAgICAgICAgcHJpdmF0ZSB2b2lkIHRleHRJbnB1dEludmFsaWQoKSB7CiAgICAgICAgICAgICAgICBzZXRUZXh0KHRleHQpOwogICAgICAgICAgICAgICAgc2V0U2VsZWN0aW9uKGJlZm9yZUN1cnNvclBvc2l0aW9uKTsKICAgICAgICAgICAgICAgIERldmljZVV0aWwuc2hha2VUaGVNZXNzYWdlKGdldENvbnRleHQoKSwgVWtJbnNpZGVUZXh0Vmlldy50aGlzKTsKICAgICAgICAgICAgICAgIFRvYXN0VXRpbC5zaG93TG9uZyhnZXRDb250ZXh0KCksIFIuc3RyaW5nLnVrX2luc2lkZV90ZXh0X2ludmFsaWRfbWVzc2FnZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBPdmVycmlkZQogICAgICAgICAgICBwdWJsaWMgdm9pZCBiZWZvcmVUZXh0Q2hhbmdlZChDaGFyU2VxdWVuY2UgcywgaW50IHN0YXJ0LCBpbnQgY291bnQsIGludCBhZnRlcikgewogICAgICAgICAgICAgICAgLy9TdG9yZSB0aGUgb3JpZ2luYWwgdGV4dCBhbmQgcG9zaXRpb24KICAgICAgICAgICAgICAgIC8vVG8gYXBwbHkgdW5kb2luZyBpZiB0aGUgbGltaXQgaXMgcmVhY2hlZAogICAgICAgICAgICAgICAgdGV4dCA9IHMudG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgIHByZXZpb3VzTGVuZ3RoID0gdGV4dC5sZW5ndGgoKTsKICAgICAgICAgICAgICAgIGJlZm9yZUN1cnNvclBvc2l0aW9uID0gc3RhcnQgKyBjb3VudDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uVGV4dENoYW5nZWQoQ2hhclNlcXVlbmNlIHMsIGludCBzdGFydCwgaW50IGJlZm9yZSwgaW50IGNvdW50KSB7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBPdmVycmlkZQogICAgICAgICAgICBwdWJsaWMgdm9pZCBhZnRlclRleHRDaGFuZ2VkKEVkaXRhYmxlIHMpIHsKICAgICAgICAgICAgICAgIHJlbW92ZVRleHRDaGFuZ2VkTGlzdGVuZXIodGhpcyk7CiAgICAgICAgICAgICAgICBTdHJpbmcgY3VycmVudFN0cmluZyA9IHMudG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSBjdXJyZW50U3RyaW5nLmxlbmd0aCgpOwogICAgICAgICAgICAgICAgaWYgKGNhcmRUeXBlID09IENBUkRfQkFDS19DTEFTU0lDKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFUZXh0VXRpbHMuZXF1YWxzKHMsIG1UZXh0Q3V0T2ZmKSkgewogICAgICAgICAgICAgICAgICAgICAgICBtQnVzLnBvc3QobmV3IFVrQ3VzdG9taXplQnVzRXZlbnRzLlRleHRNb2RpZmllZEFjdGlvbih0cnVlKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMZW5ndGggIT0gcHJldmlvdXNMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBmaW5hbCBmbG9hdCBjdXJyZW50TGluZU51bWJlciA9IGdldExpbmVDb3VudCgpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExpbmVOdW1iZXIgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGluZU51bWJlciA+IGZvbnQuZ2V0TGluZUxpbWl0Tm9TaWduYXR1cmUobUN1cnJlbnRGb250U2l6ZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtQ3VycmVudEZvbnRTaXplID09IEZvbnQuTEFSR0UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExlbmd0aCA+IHByZXZpb3VzTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRCYWNrRm9udFNpemUoZm9udC5nZXRGb250U2l6ZShGb250LlNNQUxMKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5TTUFMTDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaW5lTnVtYmVyID4gZm9udC5nZXRMaW5lTGltaXROb1NpZ25hdHVyZShtQ3VycmVudEZvbnRTaXplKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dElucHV0SW52YWxpZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1VuZG8gbGFzdCBjaGFuZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExlbmd0aCA+PSBwcmV2aW91c0xlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0SW5wdXRJbnZhbGlkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1DdXJyZW50Rm9udFNpemUgPT0gRm9udC5TTUFMTCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGluZU51bWJlciA8PSBmb250LmdldExpbmVMaW1pdE5vU2lnbmF0dXJlKEZvbnQuTEFSR0UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBjdXJyZW50TGVuZ3RoIDwgcHJldmlvdXNMZW5ndGgpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsIGludCBlc3RpbWF0ZWROdW1iZXJPZkxpbmVzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRQcm9qZWN0ZWROdW1iZXJPZkxpbmVzKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXN0aW1hdGVkTnVtYmVyT2ZMaW5lcyA8PSBMQVJHRV9GT05UX0xJTkVfTElNSVQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRCYWNrRm9udFNpemUoZm9udC5nZXRGb250U2l6ZShGb250LkxBUkdFKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtQ3VycmVudEZvbnRTaXplID0gRm9udC5MQVJHRTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFkZFRleHRDaGFuZ2VkTGlzdGVuZXIodGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBpZiAoZ2V0VGFnKCkgIT0gbnVsbCkgewogICAgICAgICAgICByZW1vdmVUZXh0Q2hhbmdlZExpc3RlbmVyKChUZXh0V2F0Y2hlcikgZ2V0VGFnKCkpOwogICAgICAgIH0KICAgICAgICBzZXRUYWcobURlZmF1bHRUZXh0d2F0Y2hlcik7CiAgICAgICAgYWRkVGV4dENoYW5nZWRMaXN0ZW5lcihtRGVmYXVsdFRleHR3YXRjaGVyKTsKICAgIH0KCiAgICBwcml2YXRlIGludCBnZXRQcm9qZWN0ZWROdW1iZXJPZkxpbmVzKCkgewogICAgICAgIGZpbmFsIFN0cmluZyBtZXNzYWdlID0gZ2V0VGV4dCgpLnRvU3RyaW5nKCk7CiAgICAgICAgRHluYW1pY0xheW91dCBkeW5hbWljTGF5b3V0ID0gbmV3IER5bmFtaWNMYXlvdXQobWVzc2FnZSwgZ2V0UGFpbnQoKSwgZ2V0V2lkdGgoKSwgTGF5b3V0LkFsaWdubWVudC5BTElHTl9OT1JNQUwsIDEuMGYsIDAuMGYsIGZhbHNlKTsKCiAgICAgICAgcmV0dXJuIGR5bmFtaWNMYXlvdXQuZ2V0TGluZUNvdW50KCk7CiAgICB9CgogICAgcHJpdmF0ZSBpbnQgZ2V0UHJvamVjdGVkTnVtYmVyT2ZMaW5lcyhmbG9hdCB0ZXh0U2l6ZUluUGl4ZWxzKSB7CiAgICAgICAgZmluYWwgU3RyaW5nIG1lc3NhZ2UgPSBnZXRUZXh0KCkudG9TdHJpbmcoKTsKICAgICAgICBmaW5hbCBmbG9hdCB0ZXh0Vmlld1dpZHRoUHggPSBnZXRXaWR0aCgpOwoKICAgICAgICBQYWludCBwYWludCA9IG5ldyBQYWludCgpOwogICAgICAgIHBhaW50LnNldFRleHRTaXplKHRleHRTaXplSW5QaXhlbHMpOwogICAgICAgIHBhaW50LnNldFR5cGVmYWNlKGdldFR5cGVmYWNlKCkpOwoKICAgICAgICByZXR1cm4gU3RyaW5nVXRpbC5zcGxpdFdvcmRzSW50b1N0cmluZ3NUaGF0Rml0KG1lc3NhZ2UsIHRleHRWaWV3V2lkdGhQeCwgcGFpbnQpLnNpemUoKTsKICAgIH0KCiAgICBwcml2YXRlIGludCBnZXRQcm9qZWN0ZWROdW1iZXJPZkxpbmVzKFN0cmluZyBtZXNzYWdlLCBmbG9hdCB0ZXh0U2l6ZUluUGl4ZWxzKSB7Cg==</text>
      </register>
      <register name="-" type="4">
        <text>ratio</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxVa0luc2lkZVRleHRWaWV3XD4=</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIEBHRVQoIi9wcm9kdWN0L2xpc3QiKSBPYnNlcnZhYmxlPFByb2R1Y3REZXRhaWxSZXNwb25zZT4gZ2V0UHJvZHVjdERldGFpbCgKICAgICAgICAgICAgQFF1ZXJ5KCJpZCIpIFN0cmluZyBpZCwgQFF1ZXJ5KCJjYXRlZ29yeV9pZCIpIFN0cmluZyBjYXRlZ29yeUlkKTsgIC8vIHdpdGggQ2F0ZWdvcnlJZAo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">aW1wb3J0IGNvbS5wbGFuZXRhcnQuZnBsaWIudG9vbHMuTG9nOwo=</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICAgICAgZ2V0U3VwcG9ydEZyYWdtZW50TWFuYWdlcigpLnBvcEJhY2tTdGFjaygpOwo=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIC8vIGN1c3RvbSBtZXNzYWdlLCB3ZSBkb24ndCBuZWVkIHNpZ25hdHVyZUJ0biB0byBzaG93IGluIHNjcmVlbi4K</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Ly8gICAgICAgICAgICAgICAgcmVtb3ZlVmlldyhzaWduYXR1cmVCdG4pOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAgICAgLy8gY3VzdG9tIG1lc3NhZ2UsIHdlIGRvbid0IG5lZWQgc2lnbmF0dXJlQnRuIHRvIHNob3cgaW4gc2NyZWVuLgogICAgICAgICAgICBzaWduYXR1cmVCdG4uc2V0VmlzaWJpbGl0eShWaWV3LkdPTkUpOwogICAgICAgICAgICByZW1vdmVWaWV3KHNpZ25hdHVyZUJ0bik7Cg==</text>
      </register>
      <register name=":" type="4">
        <text>276</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search encoding="base64">XDxVa0luc2lkZVRleHRWaWV3XD4=</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxVa0luc2lkZVRleHRWaWV3XD4=</last-pattern>
      <last-dir>-1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="true" />
    </notifications>
  </component>
</application>